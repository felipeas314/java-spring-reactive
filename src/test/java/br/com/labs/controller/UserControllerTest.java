package br.com.labs.controller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.r2dbc.core.DatabaseClient;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.reactive.server.WebTestClient;

import br.com.labs.model.User;
import br.com.labs.repository.UserRepository;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@DirtiesContext
@AutoConfigureWebTestClient
@ActiveProfiles("test")
public class UserControllerTest {

	@Autowired
    private WebTestClient webTestClient;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private DatabaseClient databaseClient;
    
    private List<User> getData(){
        return Arrays.asList(new User(null,"Suman Das",30,10000),
                new User(null,"Arjun Das",5,1000),
                new User(null,"Saurabh Ganguly",40,1000000));
    }
    
    @BeforeEach
    public  void setup(){
        List<String> statements = Arrays.asList("DROP TABLE IF EXISTS users ;",
                "CREATE TABLE users ( id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(100) NOT NULL, age integer,salary decimal);");

        statements.forEach(it -> databaseClient.execute(it)
                .fetch()
                .rowsUpdated()
                .block());

        userRepository.deleteAll()
                .thenMany(Flux.fromIterable(getData()))
                .flatMap(userRepository::save)
                .doOnNext(user ->{
                    System.out.println("User Inserted from UserControllerTest: " + user);
                })
                .blockLast();

    }
    
    @Test
    public void create_user(){
        User user = new User(null,"Rahul Dravid",45,5555555);
        webTestClient.post().uri("/users").contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                            .body(Mono.just(user),User.class)
                            .exchange()
                            .expectStatus().isCreated()
                            .expectBody()
                            .jsonPath("$.id").isNotEmpty()
                            .jsonPath("$.name").isEqualTo("Rahul Dravid");
    }
    
    @Test
    public void get_user_by_id(){
        webTestClient.get().uri("/users".concat("/{userId}"),"1")
                            .exchange().expectStatus().isOk()
                            .expectBody()
                            .jsonPath("$.name","Suman Das");
    }
}
